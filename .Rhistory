fp <- fp + 1
} else {
tn <- tn + 1
}
}
}
recall <- tp / (tp + fn)
preci <- tp / (tp + fp)
f1 <- 2 * recall * preci / (recall + preci)
accuracy <- (tp + tn) / (tp + tn + fp + fn)
print(f1)
print(accuracy)
F1_Score(y_pred = mlp_pred, y_true = data_test$Revenue, positive = "TRUE")
gold <- as.numeric(mlp_test_y[, 2])
temp <- as.numeric(mlp_pred[, 2])
pred <- temp
pred[temp > 0.2] <- 1
pred[temp <= 0.2] <- 0
tp <- 0
fp <- 0
fn <- 0
tn <- 0
for (i in 1:1233) {
if (gold[i] == 1) {
if (pred[i] == 1) {
tp <- tp + 1
} else {
fn <- fn + 1
}
} else {
if (pred[i] == 1) {
fp <- fp + 1
} else {
tn <- tn + 1
}
}
}
recall <- tp / (tp + fn)
preci <- tp / (tp + fp)
f1 <- 2 * recall * preci / (recall + preci)
accuracy <- (tp + tn) / (tp + tn + fp + fn)
print(f1)
print(accuracy)
data_numeric <- data[, ]
data_numeric$Revenue <- as.integer(as.factor(data_numeric$Revenue))
data_numeric$Month <- as.integer(as.factor(data_numeric$Month))
data_numeric$Weekend <- as.integer(as.factor(data_numeric$Weekend))
data_numeric$VisitorType <- as.integer(as.factor(data_numeric$VisitorType))
data_numeric$TrafficType <- as.integer(as.factor(data_numeric$TrafficType))
data_numeric$Region <- as.integer(as.factor(data_numeric$Region))
data_numeric$Browser <- as.integer(as.factor(data_numeric$Browser))
data_numeric$OperatingSystems <- as.integer(as.factor(data_numeric$OperatingSystems))
data_numeric_train <- data_numeric[train_ind, ]
data_numeric_test <- data_numeric[-train_ind, ]
mlp_train <- data_numeric_train[sample(1:nrow(data_numeric_train), length(1:nrow(data_numeric_train))), 1:ncol(data_numeric_train)]
mlp_train_x <- mlp_train[, 1:17]
mlp_train_y <- decodeClassLabels(mlp_train[, 18])
mlp_data <- splitForTrainingAndTest(mlp_train_x, mlp_train_y, ratio = 0.1)
mlp_model <- mlp(mlp_data$inputsTrain, mlp_data$targetsTrain,
size = 50, learnFuncParams = c(0.001),
linOut = FALSE, hiddenActFunc = "Act_Logistic",
maxit = 50, inputsTest = mlp_data$inputsTest, targetsTest = mlp_data$targetsTest
)
mlp_test_x <- data_numeric_test[, 1:17]
mlp_test_y <- decodeClassLabels(data_numeric_test[, 18])
mlp_pred <- predict(mlp_model, mlp_test_x, type = "class")
gold <- as.numeric(mlp_test_y[, 2])
temp <- as.numeric(mlp_pred[, 2])
pred <- temp
pred[temp > 0.2] <- 1
pred[temp <= 0.2] <- 0
tp <- 0
fp <- 0
fn <- 0
tn <- 0
for (i in 1:1233) {
if (gold[i] == 1) {
if (pred[i] == 1) {
tp <- tp + 1
} else {
fn <- fn + 1
}
} else {
if (pred[i] == 1) {
fp <- fp + 1
} else {
tn <- tn + 1
}
}
}
recall <- tp / (tp + fn)
preci <- tp / (tp + fp)
f1 <- 2 * recall * preci / (recall + preci)
accuracy <- (tp + tn) / (tp + tn + fp + fn)
print(f1)
print(accuracy)
mlp_confusion <- confusionMatrix(as.factor(pred), as.factor(data_test$Revenue))
draw_confusion_matrix(mlp_confusion)
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
knitr::opts_chunk$set(echo = TRUE)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
knitr::opts_chunk$set(echo = TRUE)
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
svm_over <- ksvm(Revenue ~ ., data = data_over_train, kernel = "vanilladot")
svm_over_pred<- predict(svm_over, data_over_test)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
svm_over <- ksvm(Revenue ~ ., data = data_over_train, kernel = "vanilladot")
svm_over_pred <- predict(svm_over, data_over_test)
# setwd("~/Desktop/HS 650/final project/")
# rm(list=ls())
library(magrittr)
library(kableExtra)
library(xts)
library(psych)
library(corrplot)
library(caret)
library(kernlab)
library(MLmetrics)
library(RSNNS)
library(dplyr)
set.seed(1234)
library(magrittr)
library(kableExtra)
library(xts)
library(psych)
library(corrplot)
library(caret)
library(kernlab)
library(MLmetrics)
library(RSNNS)
library(dplyr)
set.seed(1234)
# helper function
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1, 1, 2)))
par(mar = c(2, 2, 2, 2), mai = c(0.1, 0.3, 0.3, 0.3))
plot(c(139, 345), c(300, 452), type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
title("CONFUSION MATRIX", cex.main = 2)
# create the matrix
rect(150, 430, 240, 370, col = "#74A0FF")
text(195, 437, "FALSE", cex = 1.2)
rect(250, 430, 340, 370, col = "#F7AD50")
text(295, 437, "TRUE", cex = 1.2)
text(138, 370, "Predicted", cex = 1.4, srt = 90, font = 2)
text(245, 448, "Actual", cex = 1.4, font = 2)
rect(150, 305, 240, 365, col = "#F7AD50")
rect(250, 305, 340, 365, col = "#74A0FF")
text(145, 400, "FALSE", cex = 1.2, srt = 90)
text(145, 335, "TRUE", cex = 1.2, srt = 90)
# add in the cm results
res <- as.numeric(cm)
text(195, 400, res[1], cex = 1.6, font = 2, col = "white")
text(195, 335, res[2], cex = 1.6, font = 2, col = "white")
text(295, 400, res[3], cex = 1.6, font = 2, col = "white")
text(295, 335, res[4], cex = 1.6, font = 2, col = "white")
}
data <- read.csv("online_shoppers_intention.csv")
data <- na.locf(data)
data_sum <- summary(data)
data_sum %>%
kable() %>%
kable_styling("striped") %>%
scroll_box(width = "700px", height = "400px")
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(kableExtra)
library(xts)
library(psych)
library(corrplot)
library(caret)
library(kernlab)
library(MLmetrics)
library(RSNNS)
library(dplyr)
set.seed(1234)
# helper function
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1, 1, 2)))
par(mar = c(2, 2, 2, 2), mai = c(0.1, 0.3, 0.3, 0.3))
plot(c(139, 345), c(300, 452), type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
title("CONFUSION MATRIX", cex.main = 2)
# create the matrix
rect(150, 430, 240, 370, col = "#74A0FF")
text(195, 437, "FALSE", cex = 1.2)
rect(250, 430, 340, 370, col = "#F7AD50")
text(295, 437, "TRUE", cex = 1.2)
text(138, 370, "Predicted", cex = 1.4, srt = 90, font = 2)
text(245, 448, "Actual", cex = 1.4, font = 2)
rect(150, 305, 240, 365, col = "#F7AD50")
rect(250, 305, 340, 365, col = "#74A0FF")
text(145, 400, "FALSE", cex = 1.2, srt = 90)
text(145, 335, "TRUE", cex = 1.2, srt = 90)
# add in the cm results
res <- as.numeric(cm)
text(195, 400, res[1], cex = 1.6, font = 2, col = "white")
text(195, 335, res[2], cex = 1.6, font = 2, col = "white")
text(295, 400, res[3], cex = 1.6, font = 2, col = "white")
text(295, 335, res[4], cex = 1.6, font = 2, col = "white")
}
data <- read.csv("online_shoppers_intention.csv")
data <- na.locf(data)
data_sum <- summary(data)
data_sum %>%
kable() %>%
kable_styling("striped") %>%
scroll_box(width = "700px", height = "400px")
data_over <- read.csv("online_shoppers_intention.csv")
data_over <- na.locf(data_over)
data_over$OperatingSystems <- as.factor(data_over$OperatingSystems)
data_over$Browser <- as.factor(data_over$Browser)
data_over$Region <- as.factor(data_over$Region)
data_over$TrafficType <- as.factor(data_over$TrafficType)
data_over$VisitorType <- as.factor(data_over$VisitorType)
data_over$Weekend <- as.factor(data_over$Weekend)
data_over$Month <- as.factor(data_over$Month)
data_over$Revenue <- as.factor(data_over$Revenue)
data_over_train <- data_over[train_ind, ]
data_over_test <- data_over[-train_ind, ]
data_over_train <- upSample(data_over_train, data_over_train$Revenue)
data_over_train <- select(data_over_train, -Class)
svm_over <- ksvm(Revenue ~ ., data = data_over_train, kernel = "vanilladot")
svm_over_pred <- predict(svm_over, data_over_test)
F1_Score(y_pred = svm_over_pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = svm_over_pred, y_true = data_over_test$Revenue)
svm_over_confusion <- confusionMatrix(data_over_test$Revenue, svm_over_pred)
draw_confusion_matrix(svm_over_confusion)
library(e1071)
by_over <- naiveBayes(Revenue ~ ., data = data_over_train)
by_over_pred <- predict(by_over, data_over_test)
F1_Score(y_pred = by_over_pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = by_over_pred, y_true = data_over_test$Revenue)
by_over_confusion <- confusionMatrix(data_over_test$Revenue, by_over_pred)
draw_confusion_matrix(by_over_confusion)
library("adabag")
data_over_train_adaboost <- data_over_train
data_over_test_adabooost <- data_over_test
data.over.adaboost <- boosting(Revenue ~ .,
data = data_train_adaboost,
boos = FALSE,
mfinal = 100,
coeflearn = "Freund"
)
data.over.adaboost.pred <- predict.boosting(data.over.adaboost, newdata = data_over_test_adabooost, newmfinal = 100)
F1_Score(y_pred = data.over.adaboost.pred$class, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = data.over.adaboost.pred$class, y_true = data_over_test$Revenue)
data.over.adaboost.confusion <- confusionMatrix(as.factor(data_over_test_adabooost$Revenue), as.factor(data.over.adaboost.pred$class))
draw_confusion_matrix(data.over.adaboost.confusion)
library(MASS)
lda_over <- lda(Revenue ~ ., data = data_over_train)
lda_over_pred <- predict(lda_over, data_over_test)
F1_Score(y_pred = lda_over_pred$class, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = lda_over_pred$class, y_true = data_over_test$Revenue)
lda_over_confusion <- confusionMatrix(as.factor(data_over_test$Revenue), as.factor(lda_over_pred$class))
draw_confusion_matrix(lda_over_confusion)
require(randomForest)
rf_over <- randomForest(Revenue ~ ., data = data_over_train, importance = TRUE, ntree = 15)
rf_over_pred <- predict(rf_over, data_over_test)
F1_Score(y_pred = rf_over_pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = rf_over_pred, y_true = data_over_test$Revenue)
rf_over_confusion <- confusionMatrix(rf_over_pred,data_over_test$Revenue,)
rf_over_confusion <- confusionMatrix(rf_over_pred,data_over_test$Revenue)
draw_confusion_matrix(rf_over_confusion)
require(kknn)
knn_over_model <- kknn(Revenue~., data_over_train, data_over_test, distance = 1, kernel = "triangular")
knn_pred <-fitted(knn_over_model)
#table(knn_pred,data_test$Revenue)
freq <- table(knn_over_pred,data_over_test$Revenue)
require(kknn)
knn_over_model <- kknn(Revenue~., data_over_train, data_over_test, distance = 1, kernel = "triangular")
knn_over_pred <-fitted(knn_over_model)
#table(knn_pred,data_test$Revenue)
freq <- table(knn_over_pred,data_over_test$Revenue)
sum(diag(freq))/sum(freq)
knn_over_confusion <- confusionMatrix(data_over_test$Revenue, knn_over_pred)
draw_confusion_matrix(knn_over_confusion)
library(rpart)
library(rpart.plot)
osp.over.rpart <- rpart(Revenue~., data=data_over_train, method = 'class', cp=0)
rpart.plot(osp.over.rpart, box.palette="RdBu", shadow.col="gray", nn=TRUE)
osp.over.pred <- predict(osp.over.rpart, data_over_test, type="class")
F1_Score(y_pred = osp.over.pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = osp.over.pred, y_true = data_over_test$Revenue)
printcp(osp.over.rpart)
plotcp(osp.over.rpart)
osp.over.rpart <- confusionMatrix(as.factor(osp.over.pred), as.factor(data_over_test$Revenue))
draw_confusion_matrix(osp.over.rpart)
osp.over.prune <- rpart(Revenue~., data=data_over_train, method = 'class', cp=0.008)
rpart.plot(osp.over.prune, box.palette="RdBu", shadow.col="gray", nn=TRUE)
prune.over.pred <- predict(osp.over.prune, data_over_test, type = "class")
F1_Score(y_pred = prune.over.pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = prune.over.pred, y_true = data__over_test$Revenue)
osp.over.prune <- rpart(Revenue~., data=data_over_train, method = 'class', cp=0.008)
rpart.plot(osp.over.prune, box.palette="RdBu", shadow.col="gray", nn=TRUE)
prune.over.pred <- predict(osp.over.prune, data_over_test, type = "class")
F1_Score(y_pred = prune.over.pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = prune.over.pred, y_true = data_over_test$Revenue)
osp.over.prune <- rpart(Revenue~., data=data_over_train, method = 'class', cp=0.001)
rpart.plot(osp.over.prune, box.palette="RdBu", shadow.col="gray", nn=TRUE)
prune.over.pred <- predict(osp.over.prune, data_over_test, type = "class")
F1_Score(y_pred = prune.over.pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = prune.over.pred, y_true = data_over_test$Revenue)
osp.over.prune <- rpart(Revenue~., data=data_over_train, method = 'class', cp=0.004)
rpart.plot(osp.over.prune, box.palette="RdBu", shadow.col="gray", nn=TRUE)
prune.over.pred <- predict(osp.over.prune, data_over_test, type = "class")
F1_Score(y_pred = prune.over.pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = prune.over.pred, y_true = data_over_test$Revenue)
prune.over.rpart <- confusionMatrix(as.factor(prune.over.pred), as.factor(data_over_test$Revenue))
draw_confusion_matrix(prune.over.rpart)
library(nnet)
nn.over <- nnet(data=data_over_train, Revenue~.,size = 10, rang = 0.1, decay = 0.01, maxit = 200, trControl = fitControl)
nn.over.pred <- predict(nn.over,data_train_test,type="class")
library(nnet)
nn.over <- nnet(data=data_over_train, Revenue~.,size = 10, rang = 0.1, decay = 0.01, maxit = 200, trControl = fitControl)
nn.over.pred <- predict(nn.over,data_over_test,type="class")
#plot(nn_pred,)
F1_Score(y_pred = nn.over.pred, y_true = data_over_test$Revenue, positive = "TRUE")
Accuracy(y_pred = nn.over.pred, y_true = data_over_test$Revenue)
nn.over.confusion <- confusionMatrix(as.factor(nn.over.pred), as.factor(data_over_test$Revenue))
draw_confusion_matrix(nn.over.confusion)
data_over_numeric <- data_over[, ]
data_over_numeric$Revenue <- as.factor(data_over_numeric$Revenue)
data_over_numeric$Month <- as.integer(as.factor(data_over_numeric$Month))
data_over_numeric$Weekend <- as.integer(as.factor(data_over_numeric$Weekend))
data_over_numeric$VisitorType <- as.integer(as.factor(data_over_numeric$VisitorType))
data_over_numeric$TrafficType <- as.integer(as.factor(data_over_numeric$TrafficType))
data_over_numeric$Region <- as.integer(as.factor(data_over_numeric$Region))
data_over_numeric$Browser <- as.integer(as.factor(data_over_numeric$Browser))
data_over_numeric$OperatingSystems <- as.integer(as.factor(data_over_numeric$OperatingSystems))
data_over_numeric <- data_over[, ]
data_over_numeric$Revenue <- as.factor(data_over_numeric$Revenue)
data_over_numeric$Month <- as.integer(as.factor(data_over_numeric$Month))
data_over_numeric$Weekend <- as.integer(as.factor(data_over_numeric$Weekend))
data_over_numeric$VisitorType <- as.integer(as.factor(data_over_numeric$VisitorType))
data_over_numeric$TrafficType <- as.integer(as.factor(data_over_numeric$TrafficType))
data_over_numeric$Region <- as.integer(as.factor(data_over_numeric$Region))
data_over_numeric$Browser <- as.integer(as.factor(data_over_numeric$Browser))
data_over_numeric$OperatingSystems <- as.integer(as.factor(data_over_numeric$OperatingSystems))
data_over_numeric_train <- data_over_numeric[train_ind, ]
data_over_numeric_test <- data_over_numeric[-train_ind, ]
mlp_over_train_raw_order <- data_over_numeric_train
mlp_over_train <- data_over_numeric_train[sample(1:nrow(data_over_numeric_train), length(1:nrow(data_over_numeric_train))), 1:ncol(data_over_numeric_train)]
mlp_over_train_x <- mlp_over_train[, 1:17]
mlp_over_train_y <- decodeClassLabels(mlp_over_train[, 18])
mlp_over_data <- splitForTrainingAndTest(mlp_over_train_x, mlp_over_train_y, ratio = 0.1)
# iris <- normTrainingAndTestSet(iris)
mlp_over <- mlp(mlp_over_data$inputsTrain, mlp_over_data$targetsTrain,
size = 20, learnFuncParams = c(0.001),
maxit = 150, learnFunc = "Rprop", inputsTest = mlp_over_data$inputsTest, targetsTest = mlp_over_data$targetsTest
)
mlp_over_test_x <- data_over_numeric_test[, 1:17]
mlp_over_test_y <- decodeClassLabels(data_over_numeric_test[, 18])
mlp_over_pred <- predict(mlp_over, mlp_over_test_x, type = "class")
gold <- as.numeric(mlp_over_test_y[, 2])
temp <- as.numeric(mlp_over_pred[, 2])
pred <- temp
pred[temp > 0.5] <- 1
pred[temp <= 0.5] <- 0
tp <- 0
fp <- 0
fn <- 0
tn <- 0
for (i in 1:1233) {
if (gold[i] == 1) {
if (pred[i] == 1) {
tp <- tp + 1
} else {
fn <- fn + 1
}
} else {
if (pred[i] == 1) {
fp <- fp + 1
} else {
tn <- tn + 1
}
}
}
recall <- tp / (tp + fn)
preci <- tp / (tp + fp)
f1 <- 2 * recall * preci / (recall + preci)
accuracy <- (tp + tn) / (tp + tn + fp + fn)
print(f1)
print(accuracy)
mlp.over.confusion <- confusionMatrix(as.factor(pred), as.factor(data_test$Revenue))
draw_confusion_matrix(mlp.over.confusion)
